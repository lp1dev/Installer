#!/usr/bin/env bash


# ArchLabs Base Installer (version 1.1 - Feb, 2018)
#
# Heavily modified and adapted by Nathaniel Maia for use in Archlabs
# Originally Written by Carl Duff for PacBang Linux
#
# This program is free software, provided under the GNU GPL


# Installation
ISO_USER="liveuser"                   # Live user account
VERSION="ArchLabs Installer 1.1"      # Installer Name / Version
ANSWER="/tmp/.archlabs-installer"     # Temp file to store answers
KEYMAP="us"                           # Virtual console keymap. Default is "us"
XKBMAP="us"                           # X11 keyboard layout. Default is "us"
ZONE=""                               # For time
SUBZONE=""                            # For time
LOCALE="en_US.UTF-8"                  # System locale. Default is "en_US.UTF-8"
ARCHI=$(uname -m)                     # Display whether 32 or 64 bit system
SYSTEM="Unknown"                      # Display whether system is BIOS or UEFI. Default is "unknown"
UEFI_MOUNT=""                         # UEFI mountpoint
HIGHLIGHT=0                           # Highlight items for Main Menu
HIGHLIGHT_SUB=0                       # Highlight items for submenus
SUB_MENU=""                           # Submenu to be highlighted
MOUNTPOINT="/mnt"                     # Installation
AIROOTIMG=""                          # Root image to install
BYPASS="$MOUNTPOINT/bypass/"          # Root image mountpoint
MOUNT_OPTS="/tmp/.mnt_opts"           # Filesystem Mount options
FS_OPTS=""                            # FS mount options available
CHK_NUM=16                            # Used for FS mount options checklist length
CURR_LOCALE="en_US.UTF-8"             # Default Locale
FONT=""                               # Set new font if necessary

# LVM
LVM=0                                 # Logical Volume Management Detected?
LVM_SEP_BOOT=0                        # 1 = Seperate /boot, 2 = seperate /boot & LVM
LVM_VG=""                             # Name of volume group to create or use
LVM_VG_MB=0                           # MB remaining of VG
LVM_LV_NAME=""                        # Name of LV to create or use
LV_SIZE_INVALID=0                     # Is LVM LV size entered valid?
VG_SIZE_TYPE=""                       # Is VG in Gigabytes or Megabytes?

# LUKS
LUKS=0                                # Luks Detected?
LUKS_DEV=""                           # If encrypted, partition
LUKS_NAME=""                          # Name given to encrypted partition
LUKS_UUID=""                          # UUID used for comparison purposes

# Edit Files
FILE=""                               # Which file is to be opened?


select_language() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Select Language " \
        --menu "Language / sprache / taal / språk / lingua / idioma / nyelv / língua" 0 0 9 \
        "1" $"English            (en_**)" "2" $"Español            (es_ES)" \
        "3" $"Português [Brasil] (pt_BR)" "4" $"Português          (pt_PT)" \
        "5" $"Français           (fr_FR)" "6" $"Russkiy            (ru_RU)" \
        "7" $"Italiano           (it_IT)" "8" $"Nederlands         (nl_NL)" \
        "9" $"Magyar             (hu_HU)" 2>${ANSWER}
    case "$(cat $ANSWER)" in
        "1") source /archlabs-installer/english.trans
            CURR_LOCALE="en_US.UTF-8"
            ;;
        "2") source /archlabs-installer/spanish.trans
            CURR_LOCALE="es_ES.UTF-8"
            ;;
        "3") source /archlabs-installer/portuguese_brasil.trans
            CURR_LOCALE="pt_BR.UTF-8"
            ;;
        "4") source /archlabs-installer/portuguese.trans
            CURR_LOCALE="pt_PT.UTF-8"
            ;;
        "5") source /archlabs-installer/french.trans
            CURR_LOCALE="fr_FR.UTF-8"
            ;;
        "6") source /archlabs-installer/russian.trans
            CURR_LOCALE="ru_RU.UTF-8"
            FONT="LatKaCyrHeb-14.psfu"
            ;;
        "7") source /archlabs-installer/italian.trans
            CURR_LOCALE="it_IT.UTF-8"
            ;;
        "8") source /archlabs-installer/dutch.trans
            CURR_LOCALE="nl_NL.UTF-8"
            ;;
        "9") source /archlabs-installer/hungarian.trans
            CURR_LOCALE="hu_HU.UTF-8"
            FONT="lat2-16.psfu"
            ;;
        *) exit 0
    esac
    sed -i "s/#${CURR_LOCALE}/${CURR_LOCALE}/" /etc/locale.gen
    locale-gen >/dev/null 2>&1
    export LANG=$CURR_LOCALE
    [[ $FONT != "" ]] && setfont $FONT
}


check_requirements() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ChkTitle " --infobox "$_ChkBody" 0 0
    sleep 2
    if [[ $(whoami) != "root" ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --infobox "$_RtFailBody" 0 0
        sleep 2 && exit 1
    fi
    if [[ ! $(ping -c 1 google.com) ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --infobox "$_ConFailBody" 0 0
        sleep 2 && exit 1
    fi
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ReqMetTitle " --infobox "$_ReqMetBody" 0 0
    sleep 2 && clear && echo "" > /tmp/.errlog
}

id_system() {
    if grep -q 'Apple' /sys/class/dmi/id/sys_vendor; then
        modprobe -r -q efivars || true
    else
        modprobe -q efivarfs
    fi
    if [[ -d "/sys/firmware/efi/" ]]; then
        if grep -q /sys/firmware/efi/efivars <<< "$(mount)"; then
            mount -t efivarfs efivarfs /sys/firmware/efi/efivars
        fi
        SYSTEM="UEFI"
    else
        SYSTEM="BIOS"
    fi
}

arch_chroot() {
    arch-chroot $MOUNTPOINT /bin/bash -c "$1"
}

check_for_error() {
    if [[ $? -eq 1 ]] && [[ $(grep -i "error" < /tmp/.errlog) != "" ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$(cat /tmp/.errlog)" 0 0
        rm -rf ${MOUNTPOINT:?}/*
        echo "" > /tmp/.errlog
        main_menu
    fi
}

check_mount() {
    if ! grep -q "$MOUNTPOINT" <<< "$(lsblk -o MOUNTPOINT)"; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_ErrNoMount" 0 0
        main_menu
    fi
}

check_base() {
    if ! [[ -e $MOUNTPOINT/etc ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_ErrNoBase" 0 0
        main_menu
    fi
}

show_devices() {
    lsblk -o NAME,MODEL,TYPE,FSTYPE,SIZE,MOUNTPOINT | \
        grep "disk\|part\|lvm\|crypt\|NAME\|MODEL\|TYPE\|FSTYPE\|SIZE\|MOUNTPOINT" > /tmp/.devlist
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_DevShowOpt " --textbox /tmp/.devlist 0 0
}

set_keymap() {
    KEYMAPS=""
    MAPS=$(ls -R /usr/share/kbd/keymaps)
    for i in $(sort <<< "$(sed 's/\.map\.gz//g' <<< "$(grep "map.gz" <<< "$MAPS")")"); do
        KEYMAPS="$KEYMAPS $i -"
    done
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_VCKeymapTitle " \
        --menu "$_VCKeymapBody" 20 40 16 $KEYMAPS 2>$ANSWER || prep_menu
    KEYMAP=$(cat $ANSWER)
    echo -e "KEYMAP=$KEYMAP\nFONT=$FONT" > /tmp/vconsole.conf
}

set_xkbmap() {
    XKBMAP_LIST=""
    keymaps_xkb=(af al am at az ba bd be bg br bt bw by ca cd ch cm cn cz de dk ee es et eu 'fi' fo fr gb ge
                 gh gn gr hr hu ie il in iq ir is it jp ke kg kh kr kz la lk lt lv ma md me mk ml mm mn mt
                 mv ng nl no np pc ph pk pl pt ro rs ru se si sk sn sy tg th tj tm tr tw tz ua us uz vn za
                 )
    for i in "${keymaps_xkb[@]}"; do
        XKBMAP_LIST="$XKBMAP_LIST $i -"
    done
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepKBLayout " \
        --menu "$_XkbmapBody" 0 0 16 $XKBMAP_LIST 2>$ANSWER || install_graphics_menu
    XKBMAP=$(sed 's/_.*//' "$ANSWER")
    echo -e "Section "\"InputClass"\"\n\tIdentifier "\"system-keyboard"\"\n\tMatchIsKeyboard "\"on"\"
    \tOption "\"XkbLayout"\" "\"$XKBMAP"\"\nEndSection" > /tmp/01-keyboard-layout.conf
    setxkbmap "$XKBMAP" 2>>/tmp/.errlog
    check_for_error
}

set_locale() {
    LOCALES=""
    for i in $(grep .UTF-8 <<< "$(sed 's/ UTF-8//g' <<< "$(sed 's/#//g' <<< "$(grep -v "#  " /etc/locale.gen)")")"); do
        LOCALES="$LOCALES $i -"
    done
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfBseSysLoc " \
        --menu "$_localeBody" 0 0 12 $LOCALES 2>$ANSWER || config_base_menu
    LOCALE=$(cat $ANSWER)
    {
        sed -i "s/en_US.UTF-8/${LOCALE}/g" $MOUNTPOINT/etc/locale.conf
        sed -i "s/#${LOCALE}/${LOCALE}/g" $MOUNTPOINT/etc/locale.gen
        cp -f $MOUNTPOINT/etc/locale.conf $MOUNTPOINT/etc/default/locale
        sed -i "s/en_US.UTF-8/${LOCALE}/g" $MOUNTPOINT/etc/default/locale
        arch_chroot "locale-gen" >/dev/null
    } 2>>/tmp/.errlog

    check_for_error
}

set_timezone() {
    ZONE=""
    for i in $(awk '{print $3}' < /usr/share/zoneinfo/zone.tab | grep "/" | sed "s/\/.*//g" | sort -ud); do
        ZONE="$ZONE $i -"
    done
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfBseTimeHC " \
        --menu "$_TimeZBody" 0 0 10 $ZONE 2>$ANSWER || config_base_menu
    ZONE=$(cat $ANSWER)
    SUBZONE=""
    for i in $(awk '{print $3}' < /usr/share/zoneinfo/zone.tab | grep "$ZONE/" | sed "s/${ZONE}\///g" | sort -ud); do
        SUBZONE="$SUBZONE $i -"
    done
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfBseTimeHC " \
        --menu "$_TimeSubZBody" 0 0 11 $SUBZONE 2>$ANSWER || config_base_menu
    SUBZONE=$(cat $ANSWER)
    if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfBseTimeHC " --yesno "$_TimeZQ $ZONE/$SUBZONE?" 0 0; then
        arch_chroot "ln -sf /usr/share/zoneinfo/$ZONE/$SUBZONE /etc/localtime" 2>>/tmp/.errlog
        check_for_error
    else
        config_base_menu
    fi
}

set_hw_clock() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfBseTimeHC " \
        --menu "$_HwCBody" 0 0 2 "utc" "-" "localtime" "-" 2>$ANSWER
    [[ $(cat $ANSWER) != "" ]] && arch_chroot "hwclock --systohc --$(cat $ANSWER)" 2>>/tmp/.errlog
    check_for_error
}

generate_fstab() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfBseFstab " --menu "$_FstabBody" 0 0 4 \
        "genfstab -p" "$_FstabDevName" "genfstab -L -p" "$_FstabDevLabel" \
        "genfstab -U -p" "$_FstabDevUUID" "genfstab -t PARTUUID -p" "$_FstabDevPtUUID" 2>$ANSWER
    if [[ $(cat $ANSWER) != "" ]]; then
        if [[ $SYSTEM == "BIOS" ]] && [[ $(cat $ANSWER) == "genfstab -t PARTUUID -p" ]]; then
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_FstabErr" 0 0
            generate_fstab
        else
            $(cat $ANSWER) $MOUNTPOINT > $MOUNTPOINT/etc/fstab 2>>/tmp/.errlog
            check_for_error
            [[ -f $MOUNTPOINT/swapfile ]] && sed -i "s/\\${MOUNTPOINT}//" $MOUNTPOINT/etc/fstab
        fi
    fi
}

set_hostname() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "Set the Hostname" \
        --inputbox "$_HostNameBody" 0 0 "archlabs" 2>$ANSWER || config_base_menu
    HOST_NAME=$(cat $ANSWER)
    echo "$HOST_NAME" > $MOUNTPOINT/etc/hostname
    echo "127.0.0.1    localhost
127.0.1.1    $HOST_NAME
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters" > $MOUNTPOINT/etc/hosts
}

set_root_password() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfUsrRoot " --clear \
        --insecure --passwordbox "$_PassRtBody" 0 0 2> $ANSWER || config_base_menu
    PASSWD=$(cat $ANSWER)
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfUsrRoot " --clear \
        --insecure --passwordbox "$_PassReEntBody" 0 0 2> ${ANSWER} || config_base_menu
    PASSWD2=$(cat $ANSWER)
    if [[ $PASSWD == "$PASSWD2" ]]; then
        echo -e "$PASSWD\n$PASSWD" >/tmp/.passwd
        arch_chroot "passwd root" < /tmp/.passwd >/dev/null 2>>/tmp/.errlog
        rm /tmp/.passwd
        check_for_error
    else
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_PassErrBody" 0 0
        set_root_password
    fi
}


create_new_user() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_NUsrTitle " \
        --inputbox "$_NUsrBody" 0 0 "" 2>$ANSWER || config_base_menu
    USER=$(cat $ANSWER)

    # Loop while user name is blank, has spaces, or has capital letters in it.
    while [[ ${#USER} -eq 0 ]] || [[ $USER =~ \ |\' ]] || [[ $USER =~ [^a-z0-9\ ] ]]; do
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_NUsrTitle " \
            --inputbox "$_NUsrErrBody" 0 0 "" 2>$ANSWER || config_base_menu
        USER=$(cat $ANSWER)
    done

    # Enter password. This step will only be reached where the loop has been skipped or broken.
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfUsrNew " --clear \
        --insecure --passwordbox "$_PassNUsrBody $USER" 0 0 2>$ANSWER || config_base_menu
    PASSWD=$(cat $ANSWER)
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfUsrNew " --clear \
        --insecure --passwordbox "$_PassReEntBody" 0 0 2>$ANSWER || config_base_menu
    PASSWD2=$(cat $ANSWER)

    # loop while passwords entered do not match.
    while [[ $PASSWD != "$PASSWD2" ]]; do
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_PassErrBody" 0 0
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfUsrNew " \
            --clear --insecure --passwordbox "$_PassNUsrBody $USER" 0 0 2>$ANSWER || config_base_menu
        PASSWD=$(cat $ANSWER)
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfUsrNew " --clear \
            --insecure --passwordbox "$_PassReEntBody" 0 0 2>$ANSWER || config_base_menu
        PASSWD2=$(cat $ANSWER)
    done

    # create new user. This step will only be reached where the password loop has been skipped or broken.
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ConfUsrNew " --infobox "$_NUsrSetBody" 0 0
    sleep 2
    echo -e "$PASSWD\n$PASSWD" > /tmp/.passwd

    # If the first (or only) user account, then change the live account
    if [[ -e $MOUNTPOINT/home/$ISO_USER ]]; then
        arch_chroot "passwd $ISO_USER" < /tmp/.passwd >/dev/null 2>>/tmp/.errlog
        check_for_error
        # Swap liveuser account
        {
            sed -i "s/${ISO_USER}/${USER}/g" $MOUNTPOINT/etc/group
            sed -i "s/${ISO_USER}/${USER}/g" $MOUNTPOINT/etc/gshadow
            sed -i "s/${ISO_USER}/${USER}/g" $MOUNTPOINT/etc/passwd
            sed -i "s/${ISO_USER}/${USER}/g" $MOUNTPOINT/etc/shadow
            sed -i "s/${ISO_USER}/${USER}/g" $MOUNTPOINT/etc/lightdm/lightdm.conf
            sed -i "s/${ISO_USER}/${USER}/g" $MOUNTPOINT/home/$ISO_USER/.config/openbox/autostart
            sed -i '/al-hello/ c sleep 10; termite -e al-hello &' $MOUNTPOINT/home/$ISO_USER/.config/openbox/autostart
            sed -i '188,193d' $MOUNTPOINT/home/$ISO_USER/.config/openbox/menu.xml
            sed -i 's/#$HOME/$HOME/g' $MOUNTPOINT/home/$ISO_USER/.config/openbox/autostart
            sed -i '/keypack/d' $MOUNTPOINT/home/$ISO_USER/.config/openbox/autostart
            rm -f  $MOUNTPOINT/home/$ISO_USER/.config/keypack

            mv $MOUNTPOINT/home/$ISO_USER "$MOUNTPOINT/home/$USER"
            arch_chroot "chown -R $USER:users /home/$USER"
            arch_chroot "usermod -aG rfkill,wheel,autologin,network,lp,storage,power,video,audio,lp $USER"

            sed -i 's/# %wheel ALL=(ALL) ALL/%wheel ALL=(ALL) ALL/g' $MOUNTPOINT/etc/sudoers
            sed -i '/%wheel ALL=(ALL) ALL NOPASSWD: ALL/s/#%wheel ALL=(ALL) ALL NOPASSWD: ALL//' $MOUNTPOINT/etc/sudoers
        } 2>>/tmp/.errlog
        check_for_error
    else
        {
            arch_chroot "useradd $USER -m -g users -G rfkill,wheel,storage,power,autologin,network,video,audio,lp -s /bin/zsh"
            arch_chroot "passwd $USER" < /tmp/.passwd >/dev/null
            arch_chroot "cp -R /etc/skel/ /home/$USER"
            arch_chroot "chown -R ${USER}:users /home/$USER"
        } 2>>/tmp/.errlog
        check_for_error
    fi
    rm /tmp/.passwd
}

run_mkinitcpio() {
    clear
    if [[ $LVM -eq 1 ]] && [[ $LUKS -eq 0 ]]; then
        sed -i 's/block filesystems/block lvm2 filesystems/g' $MOUNTPOINT/etc/mkinitcpio.conf 2>>/tmp/.errlog
    elif [[ $LVM -eq 1 ]] && [[ $LUKS -eq 1 ]]; then
        sed -i 's/block filesystems/block encrypt lvm2 filesystems/g' $MOUNTPOINT/etc/mkinitcpio.conf 2>>/tmp/.errlog
    elif [[ $LVM -eq 0 ]] && [[ $LUKS -eq 1 ]]; then
        sed -i 's/block filesystems/block encrypt filesystems/g' $MOUNTPOINT/etc/mkinitcpio.conf 2>>/tmp/.errlog
    fi
    if [[ $MNTHOOKS != "" ]]; then
        sed -i "s/keyboard fsck/keyboard ${MNTHOOKS} fsck/g" $MOUNTPOINT/etc/mkinitcpio.conf 2>>/tmp/.errlog
    fi
    check_for_error
    arch_chroot "mkinitcpio -p linux" 2>>/tmp/.errlog
    check_for_error
}

######################################################################
##            System and Partitioning Functions                     ##
######################################################################

umount_partitions() {
    MOUNTED=""
    MOUNTED=$(mount | grep "$MOUNTPOINT" | awk '{print $3}' | sort -r)
    swapoff -a
    for i in $MOUNTED; do umount "$i" >/dev/null 2>>/tmp/.errlog; done
    check_for_error
}

confirm_mount() {
    if grep -q "$1" <<< "$(mount)"; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_MntStatusTitle " --infobox "$_MntStatusSucc" 0 0 && sleep 1
        PARTS=$(sed "s~${PART}$' -'~~" <<< "$(sed "s~${PART} [0-9]*\.[0-9]*[G-M]~~" <<< "$(sed "s~${PART} [0-9]*[G-M] ~~" <<< "$PARTS")")")
        NUM_PARTS=$((NUM_PARTS - 1))
    else
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_MntStatusTitle " --infobox "$_MntStatusFail" 0 0
        sleep 1 && prep_menu
    fi
}

select_device() {
    DEVICE=""
    devices_list=$(lsblk -lno NAME,SIZE,TYPE | grep 'disk' | awk '{print "/dev/" $1 " " $2}' | sort -u)
    for i in $devices_list; do DEVICE="$DEVICE $i"; done
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_DevSelTitle " --menu "$_DevSelBody" 0 0 4 $DEVICE 2>$ANSWER || prep_menu
    DEVICE=$(cat $ANSWER)
}

find_partitions() {
    PARTS=""
    NUM_PARTS=0
    INC=$(grep "$INCLUDE_PART" <<< "$(lsblk -lno NAME,SIZE,TYPE)")
    part_list=$(sed 's/part$/\/dev\//g' <<< "$INC" | sed 's/lvm$\|crypt$/\/dev\/mapper\//g' | awk '{print $3$1 " " $2}' | sort -u)
    for i in $part_list; do PARTS="$PARTS $i"; NUM_PARTS=$((NUM_PARTS + 1)); done
    NUM_PARTS=$((NUM_PARTS / 2))
    case $INCLUDE_PART in
        'part\|lvm\|crypt')
            if ([[ $SYSTEM == "UEFI" ]] && [[ $NUM_PARTS -lt 2 ]]) || ([[ $SYSTEM == "BIOS" ]] && [[ $NUM_PARTS -eq 0 ]]); then
                dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_PartErrBody" 0 0
                create_partitions
            fi
            ;;
        'part\|crypt')
            if [[ $NUM_PARTS -eq 0 ]]; then
                dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_LvmPartErrBody" 0 0
                create_partitions
            fi
            ;;
        'part\|lvm')
            if [[ $NUM_PARTS -lt 2 ]]; then
                dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_LuksPartErrBody" 0 0
                create_partitions
            fi
    esac

}


create_partitions() {
    secure_wipe() {
        if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PartOptWipe " \
                  --yesno "$_AutoPartWipeBody1 $DEVICE $_AutoPartWipeBody2" 0 0; then
            clear && wipe -Ifre "$DEVICE"
        else
            create_partitions
        fi
    }

    auto_partition() {
        if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepPartDisk " \
                  --yesno "$_AutoPartBody1 $DEVICE $_AutoPartBody2 $_AutoPartBody3" 0 0; then
            parted -s "$DEVICE" print | awk '/^ / {print $1}' >/tmp/.del_parts
            for del_part in $(tac /tmp/.del_parts); do
                parted -s "$DEVICE" rm "$del_part" 2>>/tmp/.errlog
                check_for_error
            done

            part_table=$(awk '{print $3}' <<< "$(grep -i 'partition table' <<< "$(parted -s "$DEVICE" print)")")
            if [[ $SYSTEM == "BIOS" ]] && [[ $part_table != "msdos" ]]; then
                parted -s "$DEVICE" mklabel msdos 2>>/tmp/.errlog
            elif [[ $SYSTEM == "UEFI" ]] && [[ $part_table != "gpt" ]]; then
                parted -s "$DEVICE" mklabel gpt 2>>/tmp/.errlog
            fi
            check_for_error

            if [[ $SYSTEM == "BIOS" ]]; then
                parted -s "$DEVICE" mkpart primary ext3 1MiB 513MiB 2>>/tmp/.errlog
            else
                parted -s "$DEVICE" mkpart ESP fat32 1MiB 513MiB 2>>/tmp/.errlog
            fi
            parted -s "$DEVICE" set 1 boot on 2>>/tmp/.errlog
            parted -s "$DEVICE" mkpart primary ext3 513MiB 100% 2>>/tmp/.errlog
            check_for_error
            lsblk "$DEVICE" -o NAME,TYPE,FSTYPE,SIZE >/tmp/.devlist
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "" --textbox /tmp/.devlist 0 0
        else
            create_partitions
        fi
    }

    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_PartToolTitle" \
        --menu "$_PartToolBody" 0 0 5 "$_PartOptWipe" "BIOS & UEFI" "$_PartOptAuto" "BIOS & UEFI" \
        "gparted" "BIOS & UEFI" "cfdisk" "BIOS/MBR" "parted" "UEFI/GPT" 2>$ANSWER
    clear
    if [[ $(cat $ANSWER) != "" ]]; then
        if [[ $(cat $ANSWER) != "$_PartOptWipe" ]] && [[ $(cat $ANSWER) != "$_PartOptAuto" ]]; then
            $(cat $ANSWER) "$DEVICE"
        elif [[ $(cat $ANSWER) == "$_PartOptWipe" ]]; then
            secure_wipe && create_partitions
        elif [[ $(cat $ANSWER) == "$_PartOptAuto" ]]; then
            auto_partition
        fi
    fi
}


select_filesystem() {
    fs_opts="" CHK_NUM=0
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_FSTitle " --menu "$_FSBody" 0 0 12 "$_FSSkip" "-" \
        "btrfs" "mkfs.btrfs -f" "ext2" "mkfs.ext2 -q" "ext3" "mkfs.ext3 -q" "ext4" "mkfs.ext4 -q" \
        "f2fs" "mkfs.f2fs" "jfs" "mkfs.jfs -q" "nilfs2" "mkfs.nilfs2 -q" "ntfs" "mkfs.ntfs -q" \
        "reiserfs" "mkfs.reiserfs -q" "vfat" "mkfs.vfat -F32" "xfs" "mkfs.xfs -f" 2>$ANSWER
    case "$(cat $ANSWER)" in
        "$_FSSkip") FILESYSTEM="$_FSSkip" ;;
        "btrfs") FILESYSTEM="mkfs.btrfs -f" CHK_NUM=16
            fs_opts=(autodefrag compress=zlib compress=lzo compress=no compress-force=zlib
                     compress-force=lzo discard noacl noatime nodatasum nospace_cache recovery
                     skip_balance space_cache ssd ssd_spread
                     )
            modprobe btrfs
            ;;
        "ext2") FILESYSTEM="mkfs.ext2 -q" ;;
        "ext3") FILESYSTEM="mkfs.ext3 -q" ;;
        "ext4") FILESYSTEM="mkfs.ext4 -q" CHK_NUM=8
            fs_opts=(data=journal data=writeback dealloc discard noacl noatime nobarrier nodelalloc)
            ;;
        "f2fs") FILESYSTEM="mkfs.f2fs" CHK_NUM=16
            fs_opts=(data_flush disable_roll_forward disable_ext_identify discard fastboot
                     flush_merge inline_xattr inline_data inline_dentry no_heap noacl nobarrier
                     noextent_cache noinline_data norecovery
                     )
            modprobe f2fs
            ;;
        "jfs") FILESYSTEM="mkfs.jfs -q" CHK_NUM=4
            fs_opts=(discard errors=continue errors=panic nointegrity)
            ;;
        "nilfs2") FILESYSTEM="mkfs.nilfs2 -q" CHK_NUM=7
            fs_opts=(discard nobarrier errors=continue errors=panic order=relaxed order=strict norecovery)
            ;;
        "ntfs") FILESYSTEM="mkfs.ntfs -q" ;;
        "reiserfs") FILESYSTEM="mkfs.reiserfs -q" CHK_NUM=5
            fs_opts=(acl nolog notail replayonly user_xattr)
            ;;
        "vfat") FILESYSTEM="mkfs.vfat -F32" ;;
        "xfs") FILESYSTEM="mkfs.xfs -f" CHK_NUM=9
            fs_opts=(discard filestreams ikeep largeio noalign nobarrier norecovery noquota wsync)
            ;;
        *) prep_menu
    esac
    if [[ $FILESYSTEM != "$_FSSkip" ]]; then
        if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_FSTitle " --yesno "$FILESYSTEM $PART" 0 0; then
            $FILESYSTEM "$PART" >/dev/null 2>>/tmp/.errlog
            check_for_error
        else
            select_filesystem
        fi
    fi
}

mount_partitions() {
    mount_opts() {
        FS_OPTS=""
        echo "" > $MOUNT_OPTS
        for i in "${fs_opts[@]}"; do
            FS_OPTS="$FS_OPTS $i - off"
        done
        FS_TITLE=$(sed "s/-.*//g" <<< "$(sed "s/.*\.//g" <<< "$FILESYSTEM")")
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $FS_TITLE " \
            --checklist "$_btrfsMntBody" 0 0 $CHK_NUM $FS_OPTS 2>$MOUNT_OPTS
        sed -i 's/ /,/g' $MOUNT_OPTS
        sed -i '$s/,$//' $MOUNT_OPTS
        ANS=$(cat $MOUNT_OPTS)
        if [[ $ANS != "" ]]; then
            if ! dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_MntStatusTitle " \
                        --yesno "${_btrfsMntConfBody}$ANS" 10 75; then
                mount_opts
            fi
        fi
    }

    mount_current_partition() {
        mkdir -p "${MOUNTPOINT}$MOUNT" 2>>/tmp/.errlog
        if [[ $fs_opts != "" ]]; then mount_opts; fi
        if [[ $ANS != "" ]]; then
            mount -o "$ANS" "$PART" "${MOUNTPOINT}$MOUNT" 2>>/tmp/.errlog
        else
            mount "$PART" "${MOUNTPOINT}$MOUNT" 2>>/tmp/.errlog
        fi
        check_for_error
        confirm_mount "${MOUNTPOINT}$MOUNT"

        if grep -q "crypt" <<< "$(lsblk -lno TYPE "$PART")"; then
            LUKS=1 LUKS_NAME=$(sed "s~^/dev/mapper/~~g" <<< "$PART")
            BLKS=$(lsblk -lno NAME,FSTYPE,TYPE)
            cryptparts=$(awk '{print "/dev/mapper/"$1}' <<< "$(uniq <<< "$(grep -i "crypto_luks" <<< "$(grep "lvm" <<< "$BLKS")")")")
            for i in $cryptparts; do
                if grep -q "$LUKS_NAME" <<< "$(lsblk -lno NAME "$i")"; then
                    LUKS_DEV="$LUKS_DEV cryptdevice=${i}:$LUKS_NAME" LVM=1
                    break
                fi
            done
            cryptparts=$(awk '{print "/dev/"$1}' <<< "$(uniq <<< "$(grep -i "crypto_luks" <<< "$(grep "part" <<< "$BLKS")")")")
            for i in $cryptparts; do
                if grep -q "$LUKS_NAME" <<< "$(lsblk -lno NAME "$i")"; then
                    BLK=$(lsblk -lno UUID,TYPE,FSTYPE "$i")
                    LUKS_UUID=$(awk '{print $1}' <<< "$(grep -i "crypto_luks" <<< "$(grep "part" <<< "$BLK")")")
                    LUKS_DEV="$LUKS_DEV cryptdevice=UUID=${LUKS_UUID}:$LUKS_NAME"
                    break
                fi
            done
        elif grep -q "lvm" <<< "$(lsblk -lno TYPE "$PART")"; then
            LVM=1
            cryptparts=$(awk '{print "/dev/mapper/"$1}' <<< "$(uniq <<< "$(grep -i "lvm2_member" <<< "$(grep "crypt" <<< "$BLKS")")")")
            for i in $cryptparts; do
                if grep -q "$(sed "s~^/dev/mapper/~~g" <<< "$PART")" <<< "$(lsblk -lno NAME "$i")"; then
                    LUKS_NAME=$(sed "s~/dev/mapper/~~g" <<< "$i")
                    break
                fi
            done
            cryptparts=$(awk '{print "/dev/"$1}' <<< "$(uniq <<< "$(grep -i "crypto_luks" <<< "$(grep "part" <<< "$BLKS")")")")
            for i in $cryptparts; do
                if grep -q "$LUKS_NAME" <<< "$(lsblk -lno NAME "$i")"; then
                    BLK=$(lsblk -lno UUID,TYPE,FSTYPE "$i")
                    LUKS_UUID=$(awk '{print $1}' <<< "$(grep -i "crypto_luks" <<< "$(grep "part" <<< "$BLK")")")
                    if ! grep -q "$LUKS_UUID" <<< "$LUKS_DEV"; then
                        LUKS_DEV="$LUKS_DEV cryptdevice=UUID=$LUKS_UUID:$LUKS_NAME" LUKS=1
                    fi
                    break
                fi
            done
        fi
    }

    make_swap() {
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepMntPart " \
            --menu "$_SelSwpBody" 0 0 7 "$_SelSwpNone" $"-" "$_SelSwpFile" $"-" $PARTS 2>$ANSWER || prep_menu
        if [[ $(cat $ANSWER) != "$_SelSwpNone" ]]; then
            if [[ $(cat $ANSWER) == "$_SelSwpFile" ]]; then
                total_memory=$(sed 's/\..*//' <<< "$(awk '{print $2/1024}' <<< "$(grep "MemTotal" /proc/meminfo)")")
                dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SelSwpFile " \
                    --inputbox "M = MB, G = GB" 9 30 "${total_memory}M" 2>$ANSWER || make_swap
                m_or_g=$(cat $ANSWER)
                while ! grep '[MG]' <<< "${m_or_g:-1}" && [[ $(cat $ANSWER) != "$_SelSwpNone" ]]; do
                    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SelSwpFile " \
                        --msgbox "$_SelSwpFile $_ErrTitle: M = MB, G = GB" 0 0
                    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SelSwpFile " \
                        --inputbox "M = MB, G = GB" 9 30 "${total_memory}M" 2>$ANSWER || make_swap
                    m_or_g=$(cat $ANSWER)
                done
                {
                    fallocate -l "$m_or_g" "$MOUNTPOINT/swapfile"
                    chmod 600 $MOUNTPOINT/swapfile
                    mkswap $MOUNTPOINT/swapfile
                    swapon $MOUNTPOINT/swapfile
                } 2>>/tmp/.errlog
                check_for_error
            else
                if [[ $(grep -i "swap" <<< "$(lsblk -o FSTYPE "$PART")") != "swap" ]]; then
                    if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepMntPart " --yesno "mkswap $PART" 0 0; then
                        mkswap "$PART" >/dev/null 2>>/tmp/.errlog
                    fi
                    mount_partitions
                fi
                swapon "$PART" >/dev/null 2>>/tmp/.errlog
                check_for_error
                PARTS=$(sed "s~${PART}$' -'~~" <<< "$(sed "s~${PART} [0-9]*\.[0-9]*[GMT]~~" <<< "$(sed "s~${PART} [0-9]*.[GMT] ~~" <<< "$PARTS")")")
                NUM_PARTS=$((NUM_PARTS - 1))
            fi
        fi
    }

    MOUNT="" LUKS_NAME="" LUKS_DEV="" LUKS_UUID="" LUKS=0 LVM=0
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepMntPart " \
        --msgbox "$_WarnMount1 '$_FSSkip' $_WarnMount2" 0 0
    lvm_detect
    INCLUDE_PART='part\|lvm\|crypt'
    umount_partitions
    find_partitions
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepMntPart " \
        --menu "$_SelRootBody" 0 0 7 $PARTS 2>$ANSWER || prep_menu
    PART=$(cat $ANSWER)
    select_filesystem
    mount_current_partition
    make_swap

    # Extra Step for VFAT EFI Partition. This cannot be in an LVM container.
    if [[ $SYSTEM == "UEFI" ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepMntPart " \
               --menu "$_SelUefiBody" 0 0 7 $PARTS 2>$ANSWER || prep_menu
        PART=$(cat $ANSWER)
        if grep -q "fat" <<< "$(fsck -N "$PART")"; then
            if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepMntPart " \
                      --yesno "$_FormUefiBody $PART $_FormUefiBody2" 0 0; then
                mkfs.vfat -F32 "$PART" >/dev/null 2>>/tmp/.errlog
            fi
        else
            mkfs.vfat -F32 "$PART" >/dev/null 2>>/tmp/.errlog
        fi
        check_for_error
        UEFI_MOUNT=/boot/efi
        mkdir -p "${MOUNTPOINT}$UEFI_MOUNT" 2>>/tmp/.errlog
        mount "$PART" "${MOUNTPOINT}$UEFI_MOUNT" 2>>/tmp/.errlog
        check_for_error
        confirm_mount "${MOUNTPOINT}$UEFI_MOUNT"
    fi

    # All other partitions
    while [[ $NUM_PARTS -gt 0 ]]; do
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepMntPart " \
            --menu "$_ExtPartBody" 0 0 7 "$_Done" $"-" $PARTS 2>$ANSWER || prep_menu
        PART=$(cat $ANSWER)
        if [[ $PART == "$_Done" ]]; then
            break
        else
            MOUNT=""
            select_filesystem
            MNT_EXAMPLES="/home /var"
            [[ $SYSTEM != "UEFI" ]] && MNT_EXAMPLES="/boot $MNT_EXAMPLES"
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepMntPart $PART " \
                --inputbox "${_ExtPartBody1}$MNT_EXAMPLES" 0 0 "/" 2>$ANSWER || prep_menu
            MOUNT=$(cat $ANSWER)
            while [[ ${MOUNT:0:1} != "/" ]] || [[ ${#MOUNT} -le 1 ]] || [[ $MOUNT =~ \ |\' ]]; do
                dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_ExtErrBody" 0 0
                dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepMntPart $PART " \
                    --inputbox "${_ExtPartBody1}$MNT_EXAMPLES" 0 0 "/" 2>$ANSWER || prep_menu
                MOUNT=$(cat $ANSWER)
            done
            if [[ $MOUNT == "/usr" ]]; then
                MNTHOOKS="usr shutdown"
            fi
            mount_current_partition
            if [[ $MOUNT == "/boot" ]]; then
                [[ $(lsblk -lno TYPE "$PART" | grep "lvm") != "" ]] && LVM_SEP_BOOT=2 || LVM_SEP_BOOT=1
            fi
        fi
    done
}

######################################################################
##             Encryption (dm_crypt) Functions                      ##
######################################################################

luks_password() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepLUKS " --clear \
        --insecure --passwordbox "$_LuksPassBody" 0 0 2> $ANSWER || prep_menu
    PASSWD=$(cat $ANSWER)
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepLUKS " --clear \
        --insecure --passwordbox "$_PassReEntBody" 0 0 2> $ANSWER || prep_menu
    PASSWD2=$(cat $ANSWER)
    if [[ $PASSWD != "$PASSWD2" ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_PassErrBody" 0 0
        luks_password
    fi
}

luks_open() {
    LUKS_ROOT_NAME=""
    INCLUDE_PART='part\|crypt\|lvm'
    umount_partitions
    find_partitions
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LuksOpen " \
        --menu "$_LuksMenuBody" 0 0 7 $PARTS 2>$ANSWER || luks_menu
    PART=$(cat $ANSWER)
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LuksOpen " \
        --inputbox "$_LuksOpenBody" 10 50 "cryptroot" 2>$ANSWER || luks_menu
    LUKS_ROOT_NAME=$(cat $ANSWER)
    luks_password

    # Try to open the luks partition with the credentials given. If successful show this, otherwise show the error
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LuksOpen " --infobox "$_PlsWaitBody" 0 0
    echo "$PASSWD" | cryptsetup open --type luks "$PART" "$LUKS_ROOT_NAME" 2>>/tmp/.errlog
    check_for_error
    lsblk -o NAME,TYPE,FSTYPE,SIZE,MOUNTPOINT "$PART" | grep "crypt\|NAME\|MODEL\|TYPE\|FSTYPE\|SIZE" > /tmp/.devlist
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_DevShowOpt " --textbox /tmp/.devlist 0 0
    luks_menu
}

luks_setup() {
    modprobe -a dm-mod dm_crypt
    INCLUDE_PART='part\|lvm'
    umount_partitions
    find_partitions
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LuksEncrypt " \
        --menu "$_LuksCreateBody" 0 0 7 $PARTS 2>$ANSWER || luks_menu
    PART=$(cat $ANSWER)
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LuksEncrypt " \
        --inputbox "$_LuksOpenBody" 10 50 "cryptroot" 2>$ANSWER || luks_menu
    LUKS_ROOT_NAME=$(cat $ANSWER)
    luks_password
}

luks_default() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LuksEncrypt " --infobox "$_PlsWaitBody" 0 0
    sleep 2
    echo "$PASSWD" | cryptsetup -q luksFormat "$PART" 2>>/tmp/.errlog
    echo "$PASSWD" | cryptsetup open "$PART" "$LUKS_ROOT_NAME" 2>>/tmp/.errlog
    check_for_error
}

luks_key_define() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepLUKS " \
        --inputbox "$_LuksCipherKey" 0 0 "-s 512 -c aes-xts-plain64" 2>$ANSWER || luks_menu
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LuksEncryptAdv " --infobox "$_PlsWaitBody" 0 0
    sleep 2
    echo "$PASSWD" | cryptsetup -q "$(cat $ANSWER)" luksFormat "$PART" 2>>/tmp/.errlog
    check_for_error
    echo "$PASSWD" | cryptsetup open "$PART" "$LUKS_ROOT_NAME" 2>>/tmp/.errlog
    check_for_error
}

luks_show() {
    echo -e "$_LuksEncruptSucc" > /tmp/.devlist
    lsblk -o NAME,TYPE,FSTYPE,SIZE "$PART" | grep "part\|crypt\|NAME\|TYPE\|FSTYPE\|SIZE" >> /tmp/.devlist
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LuksEncrypt " --textbox /tmp/.devlist 0 0
    luks_menu
}

luks_menu() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepLUKS " \
        --menu "$_LuksMenuBody$_LuksMenuBody2$_LuksMenuBody3" 0 0 4 \
        "$_LuksOpen" "cryptsetup open --type luks" "$_LuksEncrypt" "cryptsetup -q luksFormat" \
        "$_LuksEncryptAdv" "cryptsetup -q -s -c luksFormat" "$_Back" "-" 2>$ANSWER
    case "$(cat $ANSWER)" in
        "$_LuksOpen") luks_open ;;
        "$_LuksEncrypt")
            luks_setup
            luks_default
            luks_show
            ;;
        "$_LuksEncryptAdv")
            luks_setup
            luks_key_define
            luks_show
            ;;
        *) prep_menu
    esac
    luks_menu
}


######################################################################
##             Logical Volume Management Functions                  ##
######################################################################

lvm_detect() {
    LVM_PV=$(pvs -o pv_name --noheading 2>/dev/null)
    LVM_VG=$(vgs -o vg_name --noheading 2>/dev/null)
    LVM_LV=$(lvs -o vg_name,lv_name --noheading --separator - 2>/dev/null)
    if [[ $LVM_LV != "" ]] && [[ $LVM_VG != "" ]] && [[ $LVM_PV != "" ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepLVM " --infobox "$_LvmDetBody" 0 0
        modprobe dm-mod 2>>/tmp/.errlog
        check_for_error
        vgscan >/dev/null 2>&1
        vgchange -ay >/dev/null 2>&1
    fi
}

lvm_show_vg() {
    VG_LIST=""
    vg_list=$(lvs --noheadings | awk '{print $2}' | uniq)
    for i in $vg_list; do
        VG_LIST="$VG_LIST $i $(vgdisplay "$i" | grep -i "vg size" | awk '{print $3$4}')"
    done
    if [[ $VG_LIST == "" ]]; then
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_LvmVGErr" 0 0
        lvm_menu
    fi
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepLVM " \
        --menu "$_LvmSelVGBody" 0 0 5 $VG_LIST 2>$ANSWER || lvm_menu
}

lvm_create() {
    check_lv_size() {
        chars=0
        LV_SIZE_INVALID=0
        LESS1=$((${#LVM_LV_SIZE} - 1))
        if [[ ${#LVM_LV_SIZE} -eq 0 ]] || [[ ${LVM_LV_SIZE:0:1} -eq "0" ]]; then
            LV_SIZE_INVALID=1
        fi
        if [[ $LV_SIZE_INVALID -eq 0 ]]; then
            while [[ $chars -lt $LESS1 ]]; do
                if [[ ${LVM_LV_SIZE:chars:1} != [0-9] ]]; then
                    LV_SIZE_INVALID=1 && break
                fi
                chars=$((chars + 1))
            done
        fi
        if [[ $LV_SIZE_INVALID -eq 0 ]]; then
            LV_SIZE_TYPE=${LVM_LV_SIZE:$LESS1:1}
            case $LV_SIZE_TYPE in
                "m"|"M"|"g"|"G") LV_SIZE_INVALID=0 ;;
                *) LV_SIZE_INVALID=1
            esac
        fi
        if [[ $LV_SIZE_INVALID -eq 0 ]]; then
            case $LV_SIZE_TYPE in
                "G"|"g")
                    if [[ $((${LVM_LV_SIZE:0:$LESS1} * 1000)) -ge $LVM_VG_MB ]]; then
                        LV_SIZE_INVALID=1
                    else
                        LVM_VG_MB=$((LVM_VG_MB - $((${LVM_LV_SIZE:0:$LESS1} * 1000))))
                    fi
                    ;;
                "M"|"m")
                    if [[ ${LVM_LV_SIZE:0:$LESS1} -ge $LVM_VG_MB ]]; then
                        LV_SIZE_INVALID=1
                    else
                        LVM_VG_MB=$((LVM_VG_MB - ${LVM_LV_SIZE:0:$LESS1}))
                    fi
                    ;;
                *)
                    LV_SIZE_INVALID=1
            esac
        fi
    }


    LVM_VG="" VG_PARTS="" LVM_VG_MB=0 INCLUDE_PART='part\|crypt'
    umount_partitions
    find_partitions
    PARTS=$(sed 's/M\|G\|T/& off/g' <<< "$PARTS")
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG " \
        --inputbox "$_LvmNameVgBody" 0 0 "" 2>$ANSWER || prep_menu
    LVM_VG=$(cat $ANSWER)

    # Loop while the Volume Group name starts with a "/", is blank, has spaces, or is already being used
    while [[ ${LVM_VG:0:1} == "/" ]] || [[ ${#LVM_VG} -eq 0 ]] || [[ $LVM_VG =~ \ |\' ]] || [[ $(lsblk | grep "$LVM_VG") != "" ]]; do
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title "$_ErrTitle" --msgbox "$_LvmNameVgErr" 0 0
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG " \
            --inputbox "$_LvmNameVgBody" 0 0 "" 2>$ANSWER || prep_menu
        LVM_VG=$(cat $ANSWER)
    done

    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG " \
        --checklist "$_LvmPvSelBody $_UseSpaceBar" 0 0 7 $PARTS 2>$ANSWER || prep_menu
    [[ $(cat $ANSWER) != "" ]] && VG_PARTS=$(cat $ANSWER) || prep_menu

    # On confirmation, use 'vgcreate' command and determine the size of the VG, for creating LVs
    if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG " \
              --yesno "$_LvmPvConfBody1${LVM_VG} $_LvmPvConfBody2${VG_PARTS}" 0 0; then

        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG " \
            --infobox "$_LvmPvActBody1${LVM_VG}.$_PlsWaitBody" 0 0
        sleep 1 && vgcreate -f "$LVM_VG" "$VG_PARTS" >/dev/null 2>>/tmp/.errlog
        check_for_error
        VG_SIZE=$(vgdisplay "$LVM_VG" | grep 'VG Size' | awk '{print $3}' | sed 's/\..*//')
        VG_SIZE_TYPE=$(vgdisplay "$LVM_VG" | grep 'VG Size' | awk '{print $4}')
        [[ ${VG_SIZE_TYPE:0:1} == "G" ]] && LVM_VG_MB=$((VG_SIZE * 1000)) || LVM_VG_MB=$VG_SIZE
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG " \
            --msgbox "$_LvmPvDoneBody1 '$LVM_VG' $_LvmPvDoneBody2 ($VG_SIZE $VG_SIZE_TYPE)." 0 0
    else
        lvm_menu
    fi

    # Specify number of Logical volumes to create.
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG " \
        --radiolist "$_LvmLvNumBody1 $LVM_VG. $_LvmLvNumBody2" 0 0 9 \
        "1" "-" off "2" "-" off "3" "-" off "4" "-" off "5" "-" off \
        "6" "-" off "7" "-" off "8" "-" off "9 " "-" off 2>$ANSWER
    [[ $(cat $ANSWER) == "" ]] && lvm_menu || NUM_LOGICAL_VOLUMES=$(cat $ANSWER)

    # Loop while the number of LVs is greater than 1. This is because the size of the last LV is automatic.
    while [[ $NUM_LOGICAL_VOLUMES -gt 1 ]]; do
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG (LV:$NUM_LOGICAL_VOLUMES) " \
            --inputbox "$_LvmLvNameBody1" 0 0 "lvol" 2>$ANSWER || prep_menu
        LVM_LV_NAME=$(cat $ANSWER)

        # Loop if preceeded with a "/", if nothing is entered, if there is a space, or if that name already exists.
        while [[ ${LVM_LV_NAME:0:1} == "/" ]] || [[ ${#LVM_LV_NAME} -eq 0 ]] || [[ $LVM_LV_NAME =~ \ |\' ]] || [[ $(lsblk | grep "$LVM_LV_NAME") != "" ]]; do
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_LvmLvNameErrBody" 0 0
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG (LV:$NUM_LOGICAL_VOLUMES) " \
                --inputbox "$_LvmLvNameBody1" 0 0 "lvol" 2>$ANSWER || prep_menu
            LVM_LV_NAME=$(cat $ANSWER)
        done

        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG (LV:$NUM_LOGICAL_VOLUMES) " \
            --inputbox "${LVM_VG}: ${VG_SIZE}$VG_SIZE_TYPE (${LVM_VG_MB}MB $_LvmLvSizeBody1).$_LvmLvSizeBody2"\
            0 0 "" 2>$ANSWER || prep_menu
        LVM_LV_SIZE=$(cat $ANSWER)
        check_lv_size

        # Loop while an invalid value is entered.
        while [[ $LV_SIZE_INVALID -eq 1 ]]; do
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_LvmLvSizeErrBody" 0 0
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG (LV:$NUM_LOGICAL_VOLUMES) " \
                --inputbox "${LVM_VG}: ${VG_SIZE}$VG_SIZE_TYPE (${LVM_VG_MB}MB $_LvmLvSizeBody1).$_LvmLvSizeBody2" \
                0 0 "" 2>$ANSWER || prep_menu
            LVM_LV_SIZE=$(cat $ANSWER)
            check_lv_size
        done

        # Create the LV
        lvcreate -L "$LVM_LV_SIZE" "$LVM_VG" -n "$LVM_LV_NAME" 2>>/tmp/.errlog
        check_for_error
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG (LV:$NUM_LOGICAL_VOLUMES) " \
            --msgbox "$_Done LV $LVM_LV_NAME ($LVM_LV_SIZE) $_LvmPvDoneBody2." 0 0
        NUM_LOGICAL_VOLUMES=$((NUM_LOGICAL_VOLUMES - 1))
    done

    # Now the final LV. Size is automatic.
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG (LV:$NUM_LOGICAL_VOLUMES) " \
        --inputbox "$_LvmLvNameBody1 $_LvmLvNameBody2 (${LVM_VG_MB}MB)." 0 0 "lvol" 2>$ANSWER || prep_menu
    LVM_LV_NAME=$(cat $ANSWER)

    # Loop if preceeded with a "/", if nothing is entered, if there is a space, or if that name already exists.
    while [[ ${LVM_LV_NAME:0:1} == "/" ]] || [[ ${#LVM_LV_NAME} -eq 0 ]] || [[ $LVM_LV_NAME =~ \ |\' ]] || [[ $(lsblk | grep "$LVM_LV_NAME") != "" ]]; do
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_LvmLvNameErrBody" 0 0
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG (LV:$NUM_LOGICAL_VOLUMES) " \
            --inputbox "$_LvmLvNameBody1 $_LvmLvNameBody2 (${LVM_VG_MB}MB)." 0 0 "lvol" 2>$ANSWER || prep_menu
        LVM_LV_NAME=$(cat $ANSWER)
    done

    # Create the final LV
    lvcreate -l +100%FREE "$LVM_VG" -n "$LVM_LV_NAME" 2>>/tmp/.errlog
    check_for_error
    NUM_LOGICAL_VOLUMES=$((NUM_LOGICAL_VOLUMES - 1)) LVM=1
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmCreateVG " --yesno "$_LvmCompBody" 0 0 && show_devices || lvm_menu
}

lvm_del_vg() {
    lvm_show_vg
    if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_LvmDelVG " --yesno "$_LvmDelQ" 0 0; then
        vgremove -f "$(cat $ANSWER)" >/dev/null 2>&1
    fi
    lvm_menu
}

lvm_del_all() {
    LVM_PV=$(pvs -o pv_name --noheading 2>/dev/null)
    LVM_VG=$(vgs -o vg_name --noheading 2>/dev/null)
    LVM_LV=$(lvs -o vg_name,lv_name --noheading --separator - 2>/dev/null)
    if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Delete Logical Volume " --yesno "$_LvmDelQ" 0 0; then
        for i in $LVM_LV; do lvremove -f "/dev/mapper/$i" >/dev/null 2>&1; done
        for i in $LVM_VG; do vgremove -f "$i" >/dev/null 2>&1; done
        for i in $LVM_PV; do pvremove -f "$i" >/dev/null 2>&1; done
    fi
    lvm_menu
}

lvm_menu() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepLVM $_PrepLVM2 " --infobox "$_PlsWaitBody" 0 0
    sleep 1
    lvm_detect
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_PrepLVM $_PrepLVM2 " \
        --menu "$_LvmMenu" 0 0 4 "$_LvmCreateVG" "vgcreate -f, lvcreate -L -n" "$_LvmDelVG" "vgremove -f" \
        "$_LvMDelAll" "lvrmeove, vgremove, pvremove -f" "$_Back" "-" 2>$ANSWER
    case "$(cat $ANSWER)" in
        "$_LvmCreateVG") lvm_create  ;;
        "$_LvmDelVG")    lvm_del_vg  ;;
        "$_LvMDelAll")   lvm_del_all ;;
        *) prep_menu
    esac
}



######################################################################
##                    Installation Functions                        ##
######################################################################

install_root() {
    clear
    AIROOTIMG="/run/archiso/sfs/airootfs/"
    rsync -a --progress $AIROOTIMG $MOUNTPOINT/ 2>>/tmp/.errlog
    check_for_error

    # Clean up installation files
    {
        cp "/run/archiso/bootmnt/arch/boot/$ARCHI/vmlinuz" $MOUNTPOINT/boot/vmlinuz-linux
        cp /etc/pacman.d/mirrorlist $MOUNTPOINT/etc/pacman.d/mirrorlist
        rm -rf $BYPASS
        rm -R $MOUNTPOINT/archlabs-installer
        rm -f $MOUNTPOINT/etc/sudoers.d/g_wheel
        rm -R $MOUNTPOINT/etc/polkit-1/rules.d/49-nopasswd_global.rules
        rm -f $MOUNTPOINT/etc/mkinitcpio-archiso.conf
        rm -f $MOUNTPOINT/usr/bin/install-al
        sed -i '188,193d' $MOUNTPOINT/etc/skel/.config/openbox/menu.xml
        sed -i '/al-hello/ c sleep 10; termite --exec=/usr/bin/al-hello &' \
            $MOUNTPOINT/etc/skel/.config/openbox/autostart
        sed -i 's|#$HOME/.config/setup &|$HOME/.config/setup &|g' \
            $MOUNTPOINT/etc/skel/.config/openbox/autostart
        sed -i 's/volatile/auto/g' $MOUNTPOINT/etc/systemd/journald.conf
    } 2>>/tmp/.errlog
    check_for_error

    # Remove archiso init files
    find $MOUNTPOINT/usr/lib/initcpio -name archiso* -type f -exec rm '{}' \;

    # Setup pacman & keyring
    arch_chroot "mkdir -p /var/lib/pacman/sync"
    arch_chroot "touch /var/lib/pacman/sync/{core.db,extra.db,community.db}"
    arch_chroot "dirmngr </dev/null"
    arch_chroot "gpg --receive-keys C1A60EACE707FDA5"
    arch_chroot "pacman-key --init"
    arch_chroot "pacman-key --populate archlinux"
    keys=('AEFB411B072836CD48FF0381AE252C284B5DBA5D'
          '9E4F11C6A072942A7B3FD3B0B81EB14A09A25EB0'
          '35F52A02854DCCAEC9DD5CC410443C7F54B00041')
    for i in "${keys[@]}"; do
        arch_chroot "gpg --receive-keys $i"
        arch_chroot "pacman-key -r $i"
        arch_chroot "pacman-key --lsign $i"
    done
    arch_chroot "pacman-key --populate archlabs"
    arch_chroot "pacman -Syy --noconfirm"

    XKB="/tmp/01-keyboard-layout.conf"
    NETC="/etc/NetwokManager/system-connections"
    [[ -e /etc/resolv.conf ]] && cp -f /etc/resolv.conf $MOUNTPOINT/etc/resolv.conf
    [[ -e /tmp/vconsole.conf ]] && cp /tmp/vconsole.conf $MOUNTPOINT/etc/vconsole.conf
    [[ -e $XKB ]] && cp -f $XKB ${MOUNTPOINT}$XKB
    [[ -e $NETC ]] && cp -rf $NETC ${MOUNTPOINT}$NETC

    # Setup system services
    {
        arch_chroot "systemctl enable ntpd.service -f"
        arch_chroot "systemctl enable NetworkManager.service -f"
        arch_chroot "systemctl enable lightdm.service -f"
        arch_chroot "pacman -S iputils --noconfirm"
    } 2>>/tmp/.errlog
    check_for_error
}


install_bootloader() {

    bios_bootloader() {
        select_device
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Grub-install " --infobox "$_PlsWaitBody" 0 0
        arch_chroot "grub-install --target=i386-pc --recheck $DEVICE" 2>>/tmp/.errlog
        check_for_error
        if ([[ $LVM -eq 1 ]] && [[ $LVM_SEP_BOOT -eq 0 ]]) || [[ $LVM_SEP_BOOT -eq 2 ]]; then
            sed -i 's/GRUB_PRELOAD_MODULES=""/GRUB_PRELOAD_MODULES="lvm"/g' $MOUNTPOINT/etc/default/grub
        fi
        if [[ $LUKS_DEV != "" ]]; then
            sed -i "s~GRUB_CMDLINE_LINUX=.*~GRUB_CMDLINE_LINUX=\"${LUKS_DEV}\"~g" $MOUNTPOINT/etc/default/grub
        fi
        sed -i 's/GRUB_DISTRIBUTOR="Arch"/GRUB_DISTRIBUTOR="ArchLabs"/g' $MOUNTPOINT/etc/default/grub
        arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg" 2>/dev/null
        check_for_error
    }

    uefi_bootloader() {
        if grep -q "/sys/firmware/efi/efivars" <<< "$(mount)"; then
            mount -t efivarfs efivarfs /sys/firmware/efi/efivars
        fi
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Grub-install " --infobox "$_PlsWaitBody" 0 0
        arch_chroot "grub-install --target=x86_64-efi --efi-directory=$UEFI_MOUNT --bootloader-id=archlabs --recheck" 2>>/tmp/.errlog
        if [[ $LUKS_DEV != "" ]]; then
            sed -i "s~GRUB_CMDLINE_LINUX=.*~GRUB_CMDLINE_LINUX=\"${LUKS_DEV}\"~g" $MOUNTPOINT/etc/default/grub
        fi
        sed -i 's/GRUB_DISTRIBUTOR="Arch"/GRUB_DISTRIBUTOR="ArchLabs"/g' $MOUNTPOINT/etc/default/grub
        {
            arch_chroot "mkdir $UEFI_MOUNT/EFI/Boot"
            arch_chroot "cp -r $UEFI_MOUNT/EFI/archlabs/grubx64.efi $UEFI_MOUNT/EFI/Boot/bootx64.efi"
            arch_chroot "grub-mkconfig -o /boot/grub/grub.cfg"
        } 2>>/tmp/.errlog
        check_for_error
    }

    check_mount
    arch_chroot "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/core_perl" 2>>/tmp/.errlog
    check_for_error
    if [[ $SYSTEM == "BIOS" ]]; then
        bios_bootloader
    else
        uefi_bootloader
    fi
}


######################################################################
##                       Main Interfaces                            ##
######################################################################

security_menu(){
    if [[ $SUB_MENU != "security_menu" ]]; then
        SUB_MENU="security_menu"
        HIGHLIGHT_SUB=1
    else
        [[ $HIGHLIGHT_SUB != 4 ]] && HIGHLIGHT_SUB=$((HIGHLIGHT_SUB + 1))
    fi
    dialog --default-item $HIGHLIGHT_SUB --backtitle "$VERSION - $SYSTEM ($ARCHI)" \
        --title " $_SecMenuTitle " --menu "$_SecMenuBody" 0 0 4 \
        "1" "$_SecJournTitle" "2" "$_SecCoreTitle" "3" "$_SecKernTitle" "4" "$_Back" 2>$ANSWER
    HIGHLIGHT_SUB=$(cat $ANSWER)
    case "$(cat $ANSWER)" in
        "1")
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SecJournTitle " \
                --menu "$_SecJournBody" 0 0 7 "$_Edit" "/etc/systemd/journald.conf" \
                "10M" "SystemMaxUse=10M" "20M" "SystemMaxUse=20M" "50M" "SystemMaxUse=50M" \
                "100M" "SystemMaxUse=100M" "200M" "SystemMaxUse=200M" "$_Disable" "Storage=none" 2>$ANSWER
            if [[ $(cat $ANSWER) != "" ]]; then
                if  [[ $(cat $ANSWER) == "$_Disable" ]]; then
                    sed -i "s/#Storage.*\|Storage.*/Storage=none/g" $MOUNTPOINT/etc/systemd/journald.conf
                    sed -i "s/SystemMaxUse.*/#&/g" $MOUNTPOINT/etc/systemd/journald.conf
                    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SecJournTitle " --infobox "$_Done!" 0 0
                    sleep 2
                elif [[ $(cat $ANSWER) == "$_Edit" ]]; then
                    nano $MOUNTPOINT/etc/systemd/journald.conf
                else
                    sed -i "s/#Storage.*\|Storage.*/Storage=$(cat $ANSWER)/g" $MOUNTPOINT/etc/systemd/journald.conf
                    sed -i "s/SystemMaxUse.*/#&/g" $MOUNTPOINT/etc/systemd/journald.conf
                    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SecJournTitle " --infobox "$_Done!" 0 0
                    sleep 2
                fi
            fi
            ;;
        "2")
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SecCoreTitle " --menu "$_SecCoreBody" 0 0 2 \
                "$_Disable" "Storage=none" "$_Edit" "/etc/systemd/coredump.conf" 2>$ANSWER
            if [[ $(cat $ANSWER) == "$_Disable" ]]; then
                sed -i "s/#Storage.*\|Storage.*/Storage=none/g" ${MOUNTPOINT}/etc/systemd/coredump.conf
                dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SecCoreTitle " --infobox "$_Done!" 0 0
                sleep 2
            elif [[ $(cat $ANSWER) == "$_Edit" ]]; then
                nano $MOUNTPOINT/etc/systemd/coredump.conf
            fi
            ;;
        "3")
            dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SecKernTitle " --menu "$_SecKernLogs" 0 0 2 \
                "$_Disable" "kernel.dmesg_restrict = 1" "$_Edit" "/etc/systemd/coredump.conf.d/custom.conf" 2>$ANSWER
            case "$(cat $ANSWER)" in
                "$_Disable")
                    echo "kernel.dmesg_restrict = 1" > $MOUNTPOINT/etc/sysctl.d/50-dmesg-restrict.conf
                    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_SecKernTitle " --infobox "$_Done!" 0 0
                    sleep 2
                    ;;
                "$_Edit")
                    if [[ -e $MOUNTPOINT/etc/sysctl.d/50-dmesg-restrict.conf ]]; then
                        nano $MOUNTPOINT/etc/sysctl.d/50-dmesg-restrict.conf
                    else
                        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " Config Not Found " \
                            --msgbox " $_SeeConfErrBody $MOUNTPOINT/etc/sysctl.d/50-dmesg-restrict.conf" 0 0
                    fi
            esac
            ;;
        *)
            main_menu
    esac
    security_menu
}

greeting() {
    dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_WelTitle $VERSION " --msgbox "$_WelBody" 0 0
}

prep_menu() {
    if [[ $SUB_MENU != "prep_menu" ]]; then
        SUB_MENU="prep_menu" HIGHLIGHT_SUB=1
    else
        [[ $HIGHLIGHT_SUB != 8 ]] && HIGHLIGHT_SUB=$((HIGHLIGHT_SUB + 1))
    fi
    dialog --default-item $HIGHLIGHT_SUB --backtitle "$VERSION - $SYSTEM ($ARCHI)" \
        --title " $_PrepMenuTitle " --menu "$_PrepMenuBody" 0 0 8 \
        "1" "$_VCKeymapTitle" "2" "$_PrepKBLayout" "3" "$_DevShowOpt" \
        "4" "$_PrepPartDisk" "5" "$_PrepLUKS" "6" "$_PrepLVM $_PrepLVM2" \
        "7" "$_PrepMntPart" "8" "$_Back" 2>$ANSWER
    HIGHLIGHT_SUB=$(cat $ANSWER)
    case "$(cat $ANSWER)" in
        "1") set_keymap ;;
        "2") set_xkbmap ;;
        "3") show_devices ;;
        "4") umount_partitions && select_device && create_partitions ;;
        "5") luks_menu ;;
        "6") lvm_menu ;;
        "7") mount_partitions ;;
        *) main_menu
    esac
    prep_menu
}

install_root_menu() {
    if [[ $SUB_MENU != "install_base_menu" ]]; then
        SUB_MENU="install_base_menu" HIGHLIGHT_SUB=1
    else
        [[ $HIGHLIGHT_SUB != 4 ]] && HIGHLIGHT_SUB=$((HIGHLIGHT_SUB + 1))
    fi
    dialog --default-item $HIGHLIGHT_SUB --backtitle "$VERSION - $SYSTEM ($ARCHI)" \
        --title "$_InstBsMenuTitle" --menu "$_InstBseMenuBody" 0 0 4 \
        "1" "$_InstBse" "2" "$_MMRunMkinit" "3" "$_InstBootldr" "4" "$_Back" 2>$ANSWER
    HIGHLIGHT_SUB=$(cat $ANSWER)
    case "$(cat $ANSWER)" in
        "1") install_root ;;
        "2") run_mkinitcpio ;;
        "3") install_bootloader ;;
        *) main_menu
    esac
    install_root_menu
}

config_base_menu() {
    arch_chroot "PATH=/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/core_perl" 2>>/tmp/.errlog
    check_for_error
    if [[ $SUB_MENU != "config_base_menu" ]]; then
        SUB_MENU="config_base_menu" HIGHLIGHT_SUB=1
    else
        [[ $HIGHLIGHT_SUB != 8 ]] && HIGHLIGHT_SUB=$((HIGHLIGHT_SUB + 1))
    fi
    dialog --default-item $HIGHLIGHT_SUB --backtitle "$VERSION - $SYSTEM ($ARCHI)" \
        --title " $_ConfBseMenuTitle " --menu "$_ConfBseBody" 0 0 8 \
        "1" "$_ConfBseFstab" "2" "$_ConfBseHost" "3" "$_ConfBseSysLoc" \
        "4" "$_ConfBseTimeHC" "5" "$_ConfUsrRoot" "6" "$_ConfUsrNew" \
        "7" "$_SecMenuTitle" "8" "$_Back" 2>$ANSWER
    HIGHLIGHT_SUB=$(cat $ANSWER)
    case "$(cat $ANSWER)" in
        "1") generate_fstab ;;
        "2") set_hostname ;;
        "3") set_locale ;;
        "4") set_timezone && set_hw_clock ;;
        "5") set_root_password ;;
        "6") create_new_user ;;
        "7") security_menu ;;
        *) main_menu
    esac
    config_base_menu
}

edit_configs() {
    FILE=""
    if [[ $SUB_MENU != "edit configs" ]]; then
        SUB_MENU="edit configs" HIGHLIGHT_SUB=1
    else
        [[ $HIGHLIGHT_SUB != 12 ]] && HIGHLIGHT_SUB=$((HIGHLIGHT_SUB + 1))
    fi
    dialog --default-item $HIGHLIGHT_SUB --backtitle "$VERSION - $SYSTEM ($ARCHI)" \
        --title " $_SeeConfOptTitle " --menu "$_SeeConfOptBody" 0 0 12 \
        "1" "/etc/vconsole.conf" "2" "/etc/locale.conf" "3" "/etc/hostname" \
        "4" "/etc/hosts" "5" "/etc/sudoers" "6" "/etc/mkinitcpio.conf" \
        "7" "/etc/fstab" "8" "/etc/crypttab" "9" "/etc/default/grub" \
        "10" "/etc/lightdm" "11" "/etc/pacman.conf" "12" "$_Back" 2>$ANSWER
    HIGHLIGHT_SUB=$(cat $ANSWER)
    case "$(cat $ANSWER)" in
        "1") [[ -e $MOUNTPOINT/etc/vconsole.conf ]] && FILE="$MOUNTPOINT/etc/vconsole.conf" ;;
        "2") [[ -e $MOUNTPOINT/etc/locale.conf ]] && FILE="$MOUNTPOINT/etc/locale.conf" ;;
        "3") [[ -e $MOUNTPOINT/etc/hostname ]] && FILE="$MOUNTPOINT/etc/hostname" ;;
        "4") [[ -e $MOUNTPOINT/etc/hosts ]] && FILE="$MOUNTPOINT/etc/hosts" ;;
        "5") [[ -e $MOUNTPOINT/etc/sudoers ]] && FILE="$MOUNTPOINT/etc/sudoers" ;;
        "6") [[ -e $MOUNTPOINT/etc/mkinitcpio.conf ]] && FILE="$MOUNTPOINT/etc/mkinitcpio.conf" ;;
        "7") [[ -e $MOUNTPOINT/etc/fstab ]] && FILE="$MOUNTPOINT/etc/fstab" ;;
        "8") [[ -e $MOUNTPOINT/etc/crypttab ]] && FILE="$MOUNTPOINT/etc/crypttab" ;;
        "9") [[ -e $MOUNTPOINT/etc/default/grub ]] && FILE="$MOUNTPOINT/etc/default/grub" ;;
        "10")
            if [[ -e $MOUNTPOINT/etc/lightdm/lightdm.conf ]]; then
                FILE="$MOUNTPOINT/etc/lightdm/lightdm.conf"
                for f in $(find $MOUNTPOINT/etc/lightdm | awk -F"/" '{print $NF}'); do
                    [[ $f == *greeter.conf ]] && FILE="$FILE $MOUNTPOINT/etc/lightdm/$f"
                done
            fi
            ;;
        "11") [[ -e $MOUNTPOINT/etc/pacman.conf ]] && FILE="$MOUNTPOINT/etc/pacman.conf" ;;
        *) main_menu
    esac
    if [[ $FILE != "" ]] && [[ $DISPLAY ]] && hash geany &>/dev/null; then
        geany -i $FILE
    elif [[ $FILE != "" ]]; then
        nano -p $FILE
    else
        dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --title " $_ErrTitle " --msgbox "$_SeeConfErrBody" 0 0
    fi
    edit_configs
}


main_menu() {
    if [[ $HIGHLIGHT != 5 ]]; then
        if ! [[ -e $MOUNTPOINT/etc ]] && [[ $HIGHLIGHT != 1 ]]; then
            HIGHLIGHT=1
        else
            HIGHLIGHT=$((HIGHLIGHT + 1))
        fi
    fi
    dialog --default-item $HIGHLIGHT --backtitle "$VERSION - $SYSTEM ($ARCHI)" \
        --title " $_MMTitle " --menu "$_MMBody" 0 0 5 \
        "1" "$_PrepMenuTitle" "2" "$_InstBsMenuTitle" \
        "3" "$_ConfBseMenuTitle" "4" "$_SeeConfOptTitle" "5" "$_Done" 2>$ANSWER
    HIGHLIGHT=$(cat $ANSWER)
    if [[ $(cat $ANSWER) -eq 2 ]]; then
        check_mount
    elif [[ $(cat $ANSWER) -ge 3 ]] && [[ $(cat $ANSWER) -le 4 ]]; then
        check_mount
        check_base
    fi
    case "$(cat $ANSWER)" in
        "1") prep_menu ;;
        "2") install_root_menu ;;
        "3") config_base_menu ;;
        "4") edit_configs ;;
        *)
            if dialog --backtitle "$VERSION - $SYSTEM ($ARCHI)" --yesno "$_CloseInstBody" 8 45; then
                umount_partitions
                clear && exit 0
            else
                main_menu
            fi
    esac
    main_menu
}

id_system
select_language
check_requirements
greeting

while true; do
    main_menu
done
